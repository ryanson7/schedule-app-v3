"use client";
import { useState, useEffect, useRef } from "react";
import { supabase } from "../utils/supabaseClient";
import BaseScheduleGrid from "../components/core/BaseScheduleGrid";
import { useWeek } from "../contexts/WeekContext";
import { UnifiedScheduleCard } from "../components/cards/UnifiedScheduleCard";
import React from 'react';
import { APP_CONFIG, USER_TYPE_CONFIG } from "../config/constants";
import { getStudioMainLocationId, determineUserTypeFromShooterType, getPositionName } from '../utils/configUtils';

// Schedule Card Error Boundary
class ScheduleCardErrorBoundary extends React.Component<
  { children: React.ReactNode; key?: string | number },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode; key?: string | number }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Ïä§ÏºÄÏ§Ñ Ïπ¥Îìú Î†åÎçîÎßÅ Ïò§Î•ò:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{
          padding: '8px',
          background: '#fee2e2',
          border: '1px solid #fecaca',
          borderRadius: '4px',
          fontSize: '12px',
          color: '#dc2626',
          textAlign: 'center'
        }}>
          <div>Ïò§Î•ò Î∞úÏÉù</div>
        </div>
      );
    }

    return this.props.children;
  }
}

// üîß ÏöîÏùº Îß§Ìïë
const DAY_MAPPING: Record<number, string> = {
  0: 'sunday',
  1: 'monday', 
  2: 'tuesday',
  3: 'wednesday',
  4: 'thursday',
  5: 'friday',
  6: 'saturday'
};

// üîß ÏãúÍ∞ÑÏùÑ Î∂Ñ Îã®ÏúÑÎ°ú Î≥ÄÌôòÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
const timeToMinutes = (timeStr: string): number => {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
};

// üîß Ï£º ÏãúÏûëÏùº Í≥ÑÏÇ∞ (ÏõîÏöîÏùº Í∏∞Ï§Ä)
const getWeekStart = (dateStr: string): string => {
  try {
    const date = new Date(`${dateStr}T00:00:00`);
    const dayOfWeek = date.getDay(); // 0=Ïùº, 1=Ïõî, ...
    
    if (dayOfWeek === 1) {
      return dateStr;
    }
    
    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    const mondayDate = new Date(date);
    mondayDate.setDate(date.getDate() - daysToMonday);
    
    return mondayDate.toISOString().split('T')[0];
  } catch (error) {
    console.error('Ï£º ÏãúÏûëÏùº Í≥ÑÏÇ∞ Ïò§Î•ò:', error);
    return dateStr;
  }
};

// üîß Ïã† Î≤ÑÏ†Ñ ÏãúÍ∞Ñ Î≤îÏúÑ Í∏∞Î∞ò Í∞ÄÏö©ÏÑ± Ï≤¥ÌÅ¨
const checkTimeSlotAvailability = (scheduleStart: string, scheduleEnd: string, daySchedule: any): boolean => {
  // Ïã† Î≤ÑÏ†Ñ Ï≤òÎ¶¨ (available, startTime, endTime)
  if (daySchedule && daySchedule.hasOwnProperty('available')) {
    if (!daySchedule.available) {
      return false;
    }

    const freelancerStart = daySchedule.startTime;
    const freelancerEnd = daySchedule.endTime;

    if (!freelancerStart || !freelancerEnd) {
      return false;
    }

    const scheduleStartMinutes = timeToMinutes(scheduleStart);
    const scheduleEndMinutes = timeToMinutes(scheduleEnd);
    const freelancerStartMinutes = timeToMinutes(freelancerStart);
    const freelancerEndMinutes = timeToMinutes(freelancerEnd);

    const isWithinRange = 
      scheduleStartMinutes >= freelancerStartMinutes && 
      scheduleEndMinutes <= freelancerEndMinutes;

    console.log(`ÏãúÍ∞Ñ Î≤îÏúÑ Ï≤¥ÌÅ¨:`, {
      schedule: `${scheduleStart}-${scheduleEnd}`,
      freelancer: `${freelancerStart}-${freelancerEnd}`,
      isWithinRange
    });

    return isWithinRange;
  }

  console.log('‚ö†Ô∏è Íµ¨ Î≤ÑÏ†Ñ Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ, Ïã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî');
  return false;
};

// ÏÉâÏÉÅ ÏÑ§Ï†ï
const academyColors: Record<number, {bg: string, border: string, text: string}> = {
  1: { bg: '#fef3c7', border: '#f59e0b', text: '#92400e' },
  2: { bg: '#dbeafe', border: '#3b82f6', text: '#1e40af' },
  3: { bg: '#dcfce7', border: '#22c55e', text: '#166534' },
  4: { bg: '#fce7f3', border: '#ec4899', text: '#be185d' },
  5: { bg: '#f3e8ff', border: '#8b5cf6', text: '#6b21a8' },
  6: { bg: '#fed7d7', border: '#ef4444', text: '#b91c1c' },
  7: { bg: '#e0f2fe', border: '#06b6d4', text: '#0e7490' },
  8: { bg: '#fef3c7', border: '#f59e0b', text: '#92400e' },
  9: { bg: '#dbeafe', border: '#3b82f6', text: '#1e40af' },
  default: { bg: '#f8fafc', border: '#e2e8f0', text: '#1f2937' }
};

const internalColors: Record<string, string> = {
  'Helper': '#6B7280',
  'ÌñâÏÇ¨': '#2563EB',
  'Í∏∞ÌÉÄ': '#059669',
  'Ïû•ÎπÑ/Ïä§ÌäúÎîîÏò§ÎåÄÏó¨': '#EA580C',
  'ÎãπÏßÅ': '#DC2626',
  'Í∑ºÎ¨¥': '#7C3AED',
  'Í≥†Ï†ïÌú¥Î¨¥': '#DB2777',
  'Í∞úÏù∏Ìú¥Î¨¥': '#0891B2'
};

const getInternalLocationColor = (locationType: string): string => {
  return internalColors[locationType as keyof typeof internalColors] || '#6B7280';
};

const getContrastColor = (hexColor: string | null): string => {
  if (!hexColor || hexColor === 'transparent' || hexColor === null) return '#1f2937';
  
  const hex = hexColor.replace('#', '');
  if (hex.length !== 6) return '#1f2937';
  
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);
  const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
  
  return yiq >= 140 ? '#1F2937' : '#FFFFFF';
};

interface AllSchedulesGridProps {
  title: string;
  currentUserRole?: 'admin' | 'manager' | 'user';
}

export default function AllSchedulesGrid({ 
  title, 
  currentUserRole = 'user' 
}: AllSchedulesGridProps) {
  const [schedules, setSchedules] = useState<any[]>([]);
  const [allLocations, setAllLocations] = useState<any[]>([]);
  const [mainLocations, setMainLocations] = useState<any[]>([]);
  const [shooters, setShooters] = useState<any[]>([]);
  const [studioShootingTypes, setStudioShootingTypes] = useState<Record<number, {primary: string, secondary: string[]}>>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshTimeout, setRefreshTimeout] = useState<NodeJS.Timeout | null>(null);
  
  const [showShooterModal, setShowShooterModal] = useState(false);
  const [selectedScheduleForAssignment, setSelectedScheduleForAssignment] = useState<any | null>(null);
  const [filteredShooters, setFilteredShooters] = useState<any[]>([]);
  const [customMessage, setCustomMessage] = useState('');  // üîß Ï†ÑÎã¨ÏÇ¨Ìï≠ Î©îÏãúÏßÄ
  const [isAssigning, setIsAssigning] = useState(false);  // üîß Î∞∞Ï†ï Ï§ë ÏÉÅÌÉú
  const [isTomorrowConfirming, setIsTomorrowConfirming] = useState(false);

  
  const [filters, setFilters] = useState({
    mainLocationId: 'all',
    shooterStatus: 'all',
    scheduleStatus: 'all',
    scheduleType: 'all',
    confirmationStatus: 'all'  // üîß Ï∂îÍ∞Ä
  });
  
  const isProcessingRef = useRef(false);
  const { currentWeek, navigateWeek } = useWeek();

  const getCurrentWeekStart = (): string => {
    const weekDates = generateWeekDates();
    return weekDates[0].date;
  };

  const isCurrentWeekAffected = (weekStartDate: string): boolean => {
    if (!weekStartDate) return false;
    return weekStartDate === getCurrentWeekStart();
  };

  const isCurrentWeekSchedule = (scheduleDate: string): boolean => {
    if (!scheduleDate) return false;
    const currentWeekDates = generateWeekDates();
    return currentWeekDates.some(d => d.date === scheduleDate);
  };

  const debouncedRefresh = () => {
    if (refreshTimeout) {
      clearTimeout(refreshTimeout);
    }
    const timeout = setTimeout(() => {
      console.log('fetchAllSchedules Ïã§Ìñâ');
      fetchAllSchedules();
    }, 500);
    setRefreshTimeout(timeout);
  };

  useEffect(() => {
    fetchData();
  }, [currentWeek]);

  useEffect(() => {
    console.log('Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ ÏÑ§Ï†ï ÏãúÏûë...');
    const currentWeekStart = getCurrentWeekStart();

    const freelancerSubscription = supabase
      .channel('freelancer-schedule-changes')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'shooter_weekly_schedule' }, 
        (payload) => {
          console.log('ÌîÑÎ¶¨ÎûúÏÑú Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ Î≥ÄÍ≤Ω:', payload);
          const changedWeekStart = payload.new?.week_start_date || payload.old?.week_start_date;
          
          if (isCurrentWeekAffected(changedWeekStart)) {
            console.log('ÌòÑÏû¨ Ï£ºÏ∞® ÌîÑÎ¶¨ÎûúÏÑú Ïä§ÏºÄÏ§Ñ Î≥ÄÍ≤Ω - ÏÉàÎ°úÍ≥†Ïπ®');
            debouncedRefresh();
          }
        }
      )
      .subscribe();

    const scheduleSubscription = supabase
      .channel('schedule-assignment-changes')
      .on('postgres_changes', 
        { event: 'UPDATE', schema: 'public', table: 'schedules' }, 
        (payload) => {
          console.log('Ïä§ÏºÄÏ§Ñ Î∞∞Ï†ï Î≥ÄÍ≤Ω:', payload);
          if (payload.new && isCurrentWeekSchedule(payload.new.shoot_date)) {
            console.log('ÌòÑÏû¨ Ï£ºÏ∞® Ïä§ÏºÄÏ§Ñ Î∞∞Ï†ï Î≥ÄÍ≤Ω - ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏');
            updateScheduleInState(payload.new.id, payload.new.assigned_shooter_id);
            debouncedRefresh();
          }
        }
      )
      .subscribe();

    const newScheduleSubscription = supabase
      .channel('new-schedule-changes')
      .on('postgres_changes', 
        { event: 'INSERT', schema: 'public', table: 'schedules' }, 
        (payload) => {
          console.log('ÏÉà Ïä§ÏºÄÏ§Ñ ÏÉùÏÑ±:', payload);
          if (payload.new && isCurrentWeekSchedule(payload.new.shoot_date)) {
            console.log('ÌòÑÏû¨ Ï£ºÏ∞® ÏÉà Ïä§ÏºÄÏ§Ñ - Ï†ÑÏ≤¥ ÏÉàÎ°úÍ≥†Ïπ®');
            debouncedRefresh();
          }
        }
      )
      .subscribe();

    console.log('‚úÖ Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ ÏÑ§Ï†ï ÏôÑÎ£å');

    return () => {
      console.log('üîÑ Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ Ìï¥Ï†ú...');
      freelancerSubscription.unsubscribe();
      scheduleSubscription.unsubscribe();
      newScheduleSubscription.unsubscribe();
      
      if (refreshTimeout) {
        clearTimeout(refreshTimeout);
      }
    };
  }, [currentWeek]);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      await Promise.all([
        fetchMainLocations(),
        fetchStudioShootingTypes(), 
        fetchAllLocations(),
        fetchAllSchedules(),
        fetchShooters()
      ]);
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò:', error);
      setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const fetchMainLocations = async () => {
    try {
      const { data, error } = await supabase
        .from('main_locations')
        .select('*')
        .eq('is_active', true)
        .order('name');
        
      if (error) throw error;
      setMainLocations(data || []);
    } catch (error) {
      console.error('Î©îÏù∏ ÏúÑÏπò Ï°∞Ìöå Ïò§Î•ò:', error);
      setMainLocations([]);
    }
  };

const fetchStudioShootingTypes = async () => {
  try {
    // ‚ö†Ô∏è ÏûÑÏãúÎ°ú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (ÌÖåÏù¥Î∏î Í¥ÄÍ≥Ñ Ïò§Î•òÎ°ú Ïù∏Ìï¥)
    console.log('‚ö†Ô∏è Ï¥¨ÏòÅ ÌÉÄÏûÖ Ï°∞Ìöå ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî - ÌÖåÏù¥Î∏î Í¥ÄÍ≥Ñ ÌôïÏù∏ ÌïÑÏöî');
    setStudioShootingTypes({});
    return;
  } catch (error) {
    console.error('Ï¥¨ÏòÅ ÌÉÄÏûÖ Ï°∞Ìöå Ïò§Î•ò:', error);
    setStudioShootingTypes({});
  }
};


const fetchAllLocations = async () => {
  try {
    const [studioResult, academyResult] = await Promise.all([
      supabase
        .from('sub_locations')  // ‚úÖ Ïò¨Î∞îÎ•∏ ÌÖåÏù¥Î∏îÎ™Ö
        .select(`
          id,
          name,
          main_location_id,
          main_locations!inner (
            id,
            name,
            location_type
          )
        `)
        .eq('is_active', true)
        .eq('main_locations.location_type', 'studio')
        .order('id'),
      
      supabase
        .from('sub_locations')  // ‚úÖ Ïò¨Î∞îÎ•∏ ÌÖåÏù¥Î∏îÎ™Ö
        .select(`
          id,
          name,
          main_location_id,
          main_locations!inner (
            id,
            name,
            location_type
          )
        `)
        .eq('is_active', true)
        .eq('main_locations.location_type', 'academy')
        .order('id')
    ]);

    const { data: studioData, error: studioError } = studioResult;
    const { data: academyData, error: academyError } = academyResult;

    if (studioError) console.error('Ïä§ÌäúÎîîÏò§ Ï°∞Ìöå Ïò§Î•ò:', studioError);
    if (academyError) console.error('ÌïôÏõê Ï°∞Ìöå Ïò§Î•ò:', academyError);

    const unifiedLocations = [
      ...(studioData || [])
        .filter(loc => loc.main_locations)
        .sort((a, b) => a.id - b.id)
        .map(loc => ({
          id: `studio-${loc.id}`,
          name: `${loc.main_locations.name} - ${loc.name}`,
          type: 'studio',
          mainLocationId: loc.main_location_id,  // ‚úÖ ÏàòÏ†ï
          originalId: loc.id,
          mainLocationName: loc.main_locations.name,
          sortOrder: 0,
          studioId: loc.id,
          studioName: loc.name,
          mainLocationDisplayName: loc.main_locations.name
        })),
      
      ...(academyData || [])
        .filter(loc => loc.main_locations)
        .sort((a, b) => {
          if (a.main_location_id !== b.main_location_id) {  // ‚úÖ ÏàòÏ†ï
            return a.main_location_id - b.main_location_id;  // ‚úÖ ÏàòÏ†ï
          }
          return a.id - b.id;
        })
        .map(loc => ({
          id: `academy-${loc.id}`,
          name: `${loc.main_locations.name} - ${loc.name}`,
          type: 'academy',
          mainLocationId: loc.main_location_id,  // ‚úÖ ÏàòÏ†ï
          originalId: loc.id,
          mainLocationName: loc.main_locations.name,
          sortOrder: 1000 + loc.main_location_id * 100 + loc.id  // ‚úÖ ÏàòÏ†ï
        })),
      
      ...APP_CONFIG.internalWorkTypes.map((type, index) => ({
        id: `internal-${index}`,
        name: type,
        type: 'internal',
        originalName: type,
        sortOrder: 9000 + index
      }))
    ];

    setAllLocations(unifiedLocations);
  } catch (error) {
    console.error('ÏúÑÏπò Ï°∞Ìöå Ïò§Î•ò:', error);
    setAllLocations([]);
  }
};

const fetchAllSchedules = async () => {
  try {
    console.log('üìä ÌÜµÌï©Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå ÏãúÏûë...');
    
    const weekDates = generateWeekDates();
    const startDate = weekDates[0].date;
    const endDate = weekDates[6].date;

    // ‚úÖ ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: location Ï†ïÎ≥¥Î•º Ïò¨Î∞îÎ•¥Í≤å Ï°∞Ìöå
    const { data: studioAcademyData, error: scheduleError } = await supabase
      .from('schedules')
      .select(`
        *,
        sub_locations:sub_location_id (
          id,
          name,
          main_location_id,
          main_locations:main_location_id (
            id,
            name,
            location_type
          )
        )
      `)
      .in('schedule_type', ['studio', 'academy'])
      .eq('is_active', true)
      .eq('approval_status', 'approved')
      .gte('shoot_date', startDate)
      .lte('shoot_date', endDate)
      .order('shoot_date')
      .order('start_time');

    if (scheduleError) {
      console.error('‚ùå Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå Ïò§Î•ò:', scheduleError);
      throw scheduleError;
    }

    console.log('‚úÖ Ïä§ÌäúÎîîÏò§/ÏïÑÏπ¥Îç∞ÎØ∏ Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå:', studioAcademyData?.length || 0);
    
    if (studioAcademyData && studioAcademyData.length > 0) {
      const shooterIds = studioAcademyData
        .map(s => s.assigned_shooter_id)
        .filter(Boolean);
        
      if (shooterIds.length > 0) {
        const { data: assignedShooters, error: shooterError } = await supabase
          .from('users')
          .select('id, name, phone, role')
          .in('id', shooterIds);
          
        if (!shooterError && assignedShooters) {
          studioAcademyData.forEach(schedule => {
            if (schedule.assigned_shooter_id) {
              const shooter = assignedShooters.find(s => s.id === schedule.assigned_shooter_id);
              if (shooter) {
                schedule.user_profiles = shooter;
              }
            }
          });
        }
      }
    }

    // ‚úÖ ÎÇ¥Î∂Ä ÏóÖÎ¨¥ Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå
    const { data: internalData, error: internalError } = await supabase
      .from('internal_schedules')
      .select('*')
      .eq('is_active', true)
      .gte('schedule_date', startDate)
      .lte('schedule_date', endDate)
      .order('schedule_date')
      .order('created_at');

    if (internalError) {
      console.error('‚ùå ÎÇ¥Î∂Ä Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå Ïò§Î•ò:', internalError);
    }

    // ‚úÖ ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: main_location_idÎ•º ÏßÅÏ†ë Ï∂îÍ∞Ä
    const unifiedSchedules = [
      ...(studioAcademyData || []).map(s => ({
        ...s,
        unified_type: 'studio-academy',
        unified_location_id: `${s.schedule_type}-${s.sub_location_id}`,
        unified_date: s.shoot_date,
        main_location_id: s.sub_locations?.main_location_id, // ‚úÖ Ï∂îÍ∞ÄÎê®
        location_name: s.sub_locations?.name,
        main_location_name: s.sub_locations?.main_locations?.name
      })),
      ...(internalData || []).map(s => {
        const typeIndex = APP_CONFIG.internalWorkTypes.indexOf(s.schedule_type);
        return {
          ...s,
          unified_type: 'internal',
          unified_location_id: `internal-${typeIndex}`,
          unified_date: s.schedule_date,
          main_location_id: null, // ÎÇ¥Î∂Ä ÏóÖÎ¨¥Îäî main_location_id ÏóÜÏùå
          location_name: s.schedule_type,
          main_location_name: null
        };
      })
    ];

    console.log('‚úÖ ÌÜµÌï©Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå ÏôÑÎ£å (location Ï†ïÎ≥¥ Ìè¨Ìï®):', unifiedSchedules.length);
    setSchedules(unifiedSchedules);
    
  } catch (error) {
    console.error('‚ùå Ïä§ÏºÄÏ§Ñ Ï°∞Ìöå Ïã§Ìå®:', error);
    setSchedules([]);
    throw error;
  }
};



  const fetchShooters = async () => {
    try {
      console.log('üìã Ï¥¨ÏòÅÏûê Î°úÎî© ÏãúÏûë...');
      
      const { data: combinedData, error } = await supabase
        .from('users')
        .select(`
          id, name, phone, role, status, auth_id,
          shooters:shooters!shooters_user_id_fkey (
            shooter_type, main_location_ids, team_id, emergency_phone
          )
        `)
        .in('role', APP_CONFIG.userRoles.shootingRoles)
        .eq('status', 'active');

      if (error) {
        console.error('JOIN Î∞©Ïãù Ïã§Ìå®, Î≥ÑÎèÑ ÏøºÎ¶¨Î°ú Ï†ÑÌôò:', error);
        return await fetchShootersWithSeparateQueries();
      }

      console.log('‚úÖ JOIN Í≤∞Í≥º:', combinedData);

      const combinedShooters = (combinedData || []).map(user => {
        if (user.role === 'schedule_admin') {
          return {
            id: user.id,
            name: user.name,
            phone: user.phone,
            authid: user.auth_id,
            emergencycontact: user.phone,
            shootertype: null,
            usertype: 'schedule_admin',
            role: user.role,
            positionname: 'Ïä§ÏºÄÏ§Ñ Í¥ÄÎ¶¨Ïûê',
            organizationname: APP_CONFIG.organization.name,
            departmentname: APP_CONFIG.organization.departments.management,
            locationpreferences: [],
            weeklyavailability: {}
          };
        } else {
          const shooterInfo = user.shooters?.[0];
          console.log(`üë§ ${user.name}:`, shooterInfo ? {
            shooter_type: shooterInfo.shooter_type,
            main_location_ids: shooterInfo.main_location_ids
          } : 'Ï¥¨ÏòÅÏûê Ï†ïÎ≥¥ ÏóÜÏùå');

          return {
            id: user.id,
            name: user.name,
            phone: user.phone,
            authid: user.auth_id,
            emergencycontact: shooterInfo?.emergency_phone || user.phone,
            shootertype: shooterInfo?.shooter_type || null,
            mainlocationids: shooterInfo?.main_location_ids || null,
            teamid: shooterInfo?.team_id || null,
            usertype: determineUserTypeFromShooterType(shooterInfo?.shooter_type),
            role: user.role,
            positionname: getPositionName(shooterInfo?.shooter_type),
            organizationname: APP_CONFIG.organization.name,
            departmentname: APP_CONFIG.organization.departments.shooting,
            locationpreferences: [],
            weeklyavailability: {}
          };
        }
      });

      console.log('üìä ÏµúÏ¢Ö Î∂ÑÌè¨:', {
        schedule_admin: combinedShooters.filter(s => s.role === 'schedule_admin').length,
        dispatch: combinedShooters.filter(s => s.shootertype === 'dispatch').length,
        freelancer: combinedShooters.filter(s => s.shootertype === 'freelancer').length,
        regular: combinedShooters.filter(s => s.role === 'shooter' && !s.shootertype).length
      });

      setShooters(combinedShooters);
    } catch (error) {
      console.error('Ï¥¨ÏòÅÏûê Ï°∞Ìöå Ïò§Î•ò:', error);
      setShooters([]);
    }
  };

  const fetchShootersWithSeparateQueries = async () => {
    console.log('üìã Î≥ÑÎèÑ ÏøºÎ¶¨ Î∞©ÏãùÏúºÎ°ú Ï¥¨ÏòÅÏûê Ï°∞Ìöå...');
    
    try {
      const { data: allUsersData, error: userError } = await supabase
        .from('users')
        .select('id, name, phone, role, status, auth_id')
        .in('role', APP_CONFIG.userRoles.shootingRoles)
        .eq('status', 'active');

      if (userError) {
        console.error('ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò:', userError);
        setShooters([]);
        return;
      }

      const { data: shootersData, error: shooterError } = await supabase
        .from('shooters')
        .select('user_id, shooter_type, main_location_ids, team_id, emergency_phone');

      if (shooterError) {
        console.error('shooters ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïò§Î•ò:', shooterError);
      }

      const combinedShooters = (allUsersData || []).map(user => {
        if (user.role === 'schedule_admin') {
          return {
            id: user.id,
            name: user.name,
            phone: user.phone,
            authid: user.auth_id,
            emergencycontact: user.phone,
            shootertype: null,
            usertype: 'schedule_admin',
            role: user.role,
            positionname: 'Ïä§ÏºÄÏ§Ñ Í¥ÄÎ¶¨Ïûê',
            organizationname: APP_CONFIG.organization.name,
            departmentname: APP_CONFIG.organization.departments.management,
            locationpreferences: [],
            weeklyavailability: {}
          };
        } else {
          const shooterInfo = (shootersData || []).find(s => s.user_id === user.auth_id);
          
          console.log(`üë§ ${user.name} (auth_id: ${user.auth_id}):`, shooterInfo ? {
            shooter_type: shooterInfo.shooter_type,
            main_location_ids: shooterInfo.main_location_ids
          } : 'Ï¥¨ÏòÅÏûê Ï†ïÎ≥¥ ÏóÜÏùå');

          return {
            id: user.id,
            name: user.name,
            phone: user.phone,
            authid: user.auth_id,
            emergencycontact: shooterInfo?.emergency_phone || user.phone,
            shootertype: shooterInfo?.shooter_type || null,
            mainlocationids: shooterInfo?.main_location_ids || null,
            teamid: shooterInfo?.team_id || null,
            usertype: determineUserTypeFromShooterType(shooterInfo?.shooter_type),
            role: user.role,
            positionname: getPositionName(shooterInfo?.shooter_type),
            organizationname: APP_CONFIG.organization.name,
            departmentname: APP_CONFIG.organization.departments.shooting,
            locationpreferences: [],
            weeklyavailability: {}
          };
        }
      });

      console.log('üìä ÏµúÏ¢Ö Î∂ÑÌè¨:', {
        schedule_admin: combinedShooters.filter(s => s.role === 'schedule_admin').length,
        dispatch: combinedShooters.filter(s => s.shootertype === 'dispatch').length,
        freelancer: combinedShooters.filter(s => s.shootertype === 'freelancer').length,
        regular: combinedShooters.filter(s => s.role === 'shooter' && !s.shootertype).length
      });

      setShooters(combinedShooters);
    } catch (error) {
      console.error('Î≥ÑÎèÑ ÏøºÎ¶¨ Ï¥¨ÏòÅÏûê Ï°∞Ìöå Ïò§Î•ò:', error);
      setShooters([]);
    }
  };

const filterAvailableShooters = async (schedule: any) => {
  if (!schedule) return;

  const scheduleMainLocationId = schedule.sub_locations?.main_location_id;  // ‚úÖ ÏàòÏ†ï
  
  console.log('üîç Ï¥¨ÏòÅÏûê ÌïÑÌÑ∞ÎßÅ:', {
    date: schedule.shoot_date,
    mainLocationId: scheduleMainLocationId,
    startTime: schedule.start_time,
    endTime: schedule.end_time,
    scheduleId: schedule.id,
    totalShooters: shooters.length
  });

  let availableShooters = [...shooters];

  // 1. ÏúÑÏπò Í∏∞Î∞ò ÌïÑÌÑ∞ÎßÅ
  availableShooters = availableShooters.filter(shooter => {
    const userTypeConfig = USER_TYPE_CONFIG[shooter.usertype];
    
    if (userTypeConfig?.accessLevel === 'all_locations') {
      console.log(`${shooter.name} (${userTypeConfig.displayName}) - Î™®Îì† ÏúÑÏπò Ï†ëÍ∑º Í∞ÄÎä•`);
      return true;
    }

    if (userTypeConfig?.accessLevel === 'location_preference_only') {
      if (!shooter.mainlocationids || !Array.isArray(shooter.mainlocationids)) {
        console.log(`${shooter.name} - ÏúÑÏπò Ï†ïÎ≥¥ ÏóÜÏùå`);
        return false;
      }

      const hasLocationAccess = shooter.mainlocationids.includes(scheduleMainLocationId);
      if (!hasLocationAccess) {
        console.log(`${shooter.name} - ÏúÑÏπò Î∂àÏùºÏπò`);
        return false;
      }

      console.log(`${shooter.name} - ÏúÑÏπò ÏùºÏπò`);
      return true;
    }

    return true;
  });

  // 2. ÏãúÍ∞Ñ Ï∂©Îèå Ï≤¥ÌÅ¨
  try {
    const { data: conflictingSchedules, error } = await supabase
      .from('schedules')
      .select('id, assigned_shooter_id, shoot_date, start_time, end_time')
      .eq('shoot_date', schedule.shoot_date)
      .neq('id', schedule.id)
      .not('assigned_shooter_id', 'is', null)
      .eq('is_active', true)
      .eq('approval_status', 'approved');

    if (!error && conflictingSchedules) {
      const overlappingShooterIds = conflictingSchedules
        .filter(conflictSchedule => {
          const conflictStart = conflictSchedule.start_time;
          const conflictEnd = conflictSchedule.end_time;
          const scheduleStart = schedule.start_time;
          const scheduleEnd = schedule.end_time;

          return !(scheduleEnd <= conflictStart || conflictEnd <= scheduleStart);
        })
        .map(conflictSchedule => conflictSchedule.assigned_shooter_id);

      availableShooters = availableShooters.filter(shooter => 
        !overlappingShooterIds.includes(shooter.id)
      );
    }
  } catch (error) {
    console.error('ÏãúÍ∞Ñ Ï∂©Îèå Ï≤¥ÌÅ¨ Ïò§Î•ò:', error);
  }

  // 3. ÌîÑÎ¶¨ÎûúÏÑú Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ Ï≤¥ÌÅ¨ (Ïã† Î≤ÑÏ†Ñ ÏßÄÏõê)
  try {
    const weekStart = getWeekStart(schedule.shoot_date);
    
    const { data: freelancerSchedules, error: freelancerError } = await supabase
      .from('shooter_weekly_schedule')
      .select('shooter_id, schedule_data, week_start_date, status')
      .eq('status', 'submitted')
      .eq('week_start_date', weekStart);

    if (!freelancerError && freelancerSchedules) {
      availableShooters = availableShooters.filter(shooter => {
        if (shooter.usertype !== 'freelancer') {
          return true;
        }

        const shooterSchedule = freelancerSchedules.find(fs => fs.shooter_id === shooter.authid);
        
        if (!shooterSchedule) {
          console.log(`${shooter.name} - Ìï¥Îãπ Ï£ºÏ∞® Ïä§ÏºÄÏ§Ñ ÎØ∏Îì±Î°ù`);
          return false;
        }

        const dayOfWeek = new Date(`${schedule.shoot_date}T00:00:00`).getDay();
        const dayName = DAY_MAPPING[dayOfWeek];
        const daySchedule = shooterSchedule.schedule_data?.[dayName];

        if (!daySchedule) {
          console.log(`${shooter.name} - ${dayName} ÏöîÏùº Ïä§ÏºÄÏ§Ñ ÏóÜÏùå`);
          return false;
        }

        // Ïã† Î≤ÑÏ†Ñ ÏãúÍ∞Ñ Î≤îÏúÑ Ï≤¥ÌÅ¨
        const isAvailable = checkTimeSlotAvailability(
          schedule.start_time,
          schedule.end_time,
          daySchedule
        );
        
        if (!isAvailable) {
          console.log(`${shooter.name} - ${dayName} ÏãúÍ∞ÑÎåÄ Î∂àÍ∞Ä`);
          return false;
        }

        console.log(`${shooter.name} - ${dayName} ÏãúÍ∞ÑÎåÄ Í∞ÄÎä•`);
        return true;
      });
    }
  } catch (error) {
    console.error('ÌîÑÎ¶¨ÎûúÏÑú Ïä§ÏºÄÏ§Ñ Ï≤¥ÌÅ¨ Ïò§Î•ò:', error);
  }

  // 4. Ï†ïÎ†¨
  availableShooters.sort((a, b) => {
    const aConfig = USER_TYPE_CONFIG[a.usertype];
    const bConfig = USER_TYPE_CONFIG[b.usertype];
    const aSortOrder = aConfig?.sortOrder || 999;
    const bSortOrder = bConfig?.sortOrder || 999;
    
    if (aSortOrder !== bSortOrder) {
      return aSortOrder - bSortOrder;
    }
    
    return a.name.localeCompare(b.name);
  });

  return availableShooters;
};

  const updateScheduleInState = (scheduleId: number, shooterId: number | null) => {
    setSchedules(prevSchedules => {
      console.log('ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', scheduleId, shooterId);
      
      return prevSchedules.map(schedule => {
        if (schedule.id === scheduleId) {
          let updatedSchedule = {
            ...schedule,
            assigned_shooter_id: shooterId
          };

          if (shooterId) {
            const shooter = shooters.find(s => s.id === shooterId);
            if (shooter) {
              updatedSchedule.user_profiles = {
                id: shooter.id,
                name: shooter.name,
                phone: shooter.phone,
                role: shooter.role
              };
            }
          } else {
            updatedSchedule.user_profiles = null;
          }

          console.log('ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïä§ÏºÄÏ§Ñ:', updatedSchedule);
          return updatedSchedule;
        }
        return schedule;
      });
    });
  };

const handleShooterChange = async (scheduleId: number, newShooterId: number | null) => {
  try {
    console.log('Ï¥¨ÏòÅÏûê Î≥ÄÍ≤Ω:', scheduleId, newShooterId);
    
    if (isProcessingRef.current) return;
    setIsAssigning(true);
    isProcessingRef.current = true;

    // üîß Ìï¥Ï†úÌï† Îïå assignment_statusÎèÑ Ìï®Íªò Ï¥àÍ∏∞Ìôî
    const updateData = {
      assigned_shooter_id: newShooterId,
      assignment_status: newShooterId ? 'draft' : null,  // üîß Ìï¥Ï†úÏãú statusÎèÑ Ï¥àÍ∏∞Ìôî
      updated_at: new Date().toISOString()
    };

    const { data, error } = await supabase
      .from('schedules')
      .update(updateData)
      .eq('id', scheduleId)
      .select();

    if (error) throw error;

    console.log('ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ:', data);
    updateScheduleInState(scheduleId, newShooterId);
    
    // üîß ÏÑ†ÌÉùÎêú Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ (assignment_status Ìè¨Ìï®)
    setSelectedScheduleForAssignment(prev => ({
      ...prev,
      assigned_shooter_id: newShooterId,
      assignment_status: newShooterId ? 'draft' : null,  // üîß ÏÉÅÌÉúÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
      user_profiles: newShooterId ? filteredShooters.find(s => s.id === newShooterId) : null
    }));

    // üîß Î™®Îã¨ Ïú†ÏßÄÌïòÍ≥† Ïä§ÌÅ¨Î°§ÏùÑ ÏÉÅÎã®ÏúºÎ°ú
    setTimeout(() => {
      const modalElement = document.querySelector('[data-modal-content]');
      if (modalElement) {
        modalElement.scrollTop = 0;
      }
    }, 100);

    // Î∞±Í∑∏ÎùºÏö¥Îìú ÏÉàÎ°úÍ≥†Ïπ®
    setTimeout(async () => {
      try {
        await fetchAllSchedules();
      } catch (error) {
        console.error('ÏÉàÎ°úÍ≥†Ïπ® Ïò§Î•ò:', error);
      }
    }, 1000);

  } catch (error) {
    console.error('Ï¥¨ÏòÅÏûê Î≥ÄÍ≤Ω Ïò§Î•ò:', error);
    alert(error.message);
  } finally {
    setIsAssigning(false);
    isProcessingRef.current = false;
  }
};

// üîß Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ Î©îÏãúÏßÄ Î∞úÏÜ° (Îã§Ïùå Ï£º Ïä§ÏºÄÏ§Ñ ÌôïÏù∏)
const sendWeeklyConfirmationMessages = async () => {
  console.log('üìÖ Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ Î©îÏãúÏßÄ Î∞úÏÜ° ÏãúÏûë');

  // ÌòÑÏû¨ Ï£ºÏùò Î™®Îì† Ïä§ÏºÄÏ§ÑÏóêÏÑú Í≥†Ïú†Ìïú Ï¥¨ÏòÅÏûê Ï∂îÏ∂ú
  const uniqueShooters = new Map<string, any>();
  
  schedules.forEach(schedule => {
    if (schedule.user_profiles?.phone && schedule.user_profiles?.name) {
      const phone = schedule.user_profiles.phone;
      if (!uniqueShooters.has(phone)) {
        uniqueShooters.set(phone, {
          name: schedule.user_profiles.name,
          phone: phone
        });
      }
    }
  });

  console.log('üìã Î∞úÏÜ° ÎåÄÏÉÅ Ï¥¨ÏòÅÏûê:', uniqueShooters.size, 'Î™Ö');

  let successCount = 0;
  let failCount = 0;

  for (const [phone, shooter] of uniqueShooters) {
    try {
      await sendWeeklyCheckMessage(shooter);
      successCount++;
      console.log(`‚úÖ ${shooter.name} Ï£ºÍ∞Ñ ÌôïÏù∏ Î©îÏãúÏßÄ Î∞úÏÜ° ÏÑ±Í≥µ`);
    } catch (error) {
      failCount++;
      console.error(`‚ùå ${shooter.name} Ï£ºÍ∞Ñ ÌôïÏù∏ Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®:`, error);
    }
    
    // Î∞úÏÜ° Í∞ÑÍ≤© (0.5Ï¥à ÎåÄÍ∏∞)
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  console.log(`üìä Ï£ºÍ∞Ñ ÌôïÏù∏ Î©îÏãúÏßÄ Î∞úÏÜ° Í≤∞Í≥º - ÏÑ±Í≥µ: ${successCount}Î™Ö, Ïã§Ìå®: ${failCount}Î™Ö`);
};

// üîß Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï Ìï®Ïàò
const handleTomorrowConfirmation = async () => {
  if (!confirm('ÎÇ¥Ïùº Ïä§ÏºÄÏ§ÑÏù¥ ÏûàÎäî Î™®Îì† Ï¥¨ÏòÅÏûêÏóêÍ≤å ÌôïÏ†ï ÏïåÎ¶ºÏùÑ Î∞úÏÜ°ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    return;
  }

  setIsTomorrowConfirming(true);

  try {
    console.log('üìã Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏãúÏûë');

    // ÎÇ¥Ïùº ÎÇ†Ïßú Í≥ÑÏÇ∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];

    console.log('üìÖ ÎÇ¥Ïùº ÎÇ†Ïßú:', tomorrowStr);

    // ÎÇ¥Ïùº Ïä§ÏºÄÏ§ÑÏù¥ ÏûàÎäî Í≥†Ïú†Ìïú Ï¥¨ÏòÅÏûê Ï∂îÏ∂ú
    const tomorrowShooters = new Map<string, any>();
    
    schedules.forEach(schedule => {
      if (schedule.shoot_date === tomorrowStr && 
          schedule.user_profiles?.phone && 
          schedule.user_profiles?.name) {
        const phone = schedule.user_profiles.phone;
        if (!tomorrowShooters.has(phone)) {
          tomorrowShooters.set(phone, {
            name: schedule.user_profiles.name,
            phone: phone
          });
        }
      }
    });

    console.log('üìã ÎÇ¥Ïùº Ïä§ÏºÄÏ§Ñ Ï¥¨ÏòÅÏûê:', tomorrowShooters.size, 'Î™Ö');

    if (tomorrowShooters.size === 0) {
      alert('ÎÇ¥Ïùº Ïä§ÏºÄÏ§ÑÏù¥ Î∞∞Ï†ïÎêú Ï¥¨ÏòÅÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    let successCount = 0;
    let failCount = 0;

    for (const [phone, shooter] of tomorrowShooters) {
      try {
        await sendTomorrowConfirmMessage(shooter);
        successCount++;
        console.log(`‚úÖ ${shooter.name} ÎÇ¥Ïùº ÌôïÏ†ï Î©îÏãúÏßÄ Î∞úÏÜ° ÏÑ±Í≥µ`);
      } catch (error) {
        failCount++;
        console.error(`‚ùå ${shooter.name} ÎÇ¥Ïùº ÌôïÏ†ï Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®:`, error);
      }
      
      // Î∞úÏÜ° Í∞ÑÍ≤© (0.5Ï¥à ÎåÄÍ∏∞)
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    alert(`üìã Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏôÑÎ£å!\n\n‚úÖ ÏÑ±Í≥µ: ${successCount}Î™Ö\n‚ùå Ïã§Ìå®: ${failCount}Î™Ö`);

  } catch (error: any) {
    console.error('‚ùå Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï Ïò§Î•ò:', error);
    alert(`Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
  } finally {
    setIsTomorrowConfirming(false);
  }
};

// üîß Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ Î©îÏãúÏßÄ (Ìå®ÌÑ¥ 1)
const sendWeeklyCheckMessage = async (shooter: any) => {
  const messageBlocks = [
    {
      type: 'header',
      text: 'üìÖ Îã§Ïùå Ï£º Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ ÏöîÏ≤≠'
    },
    {
      type: 'text',
      text: `ÏïàÎÖïÌïòÏÑ∏Ïöî. ${shooter.name} PDÎãò\nÎã§Ïùå Ï£º ÏòàÏ†ï Ïä§ÏºÄÏ§Ñ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.`
    },
    {
      type: 'button',
      text: 'üìã Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ÌïòÍ∏∞',
      style: 'primary',
      action_type: 'open_inapp_browser',
      value: 'https://schedule-app-v3-kappa.vercel.app/shooter/schedule-check'
    }
  ];

  const textMessage = `üìÖ ÏïàÎÖïÌïòÏÑ∏Ïöî. ${shooter.name} PDÎãò\nÎã§Ïùå Ï£º ÏòàÏ†ï Ïä§ÏºÄÏ§Ñ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.\n\nÏä§ÏºÄÏ§Ñ ÌôïÏù∏: https://schedule-app-v3-kappa.vercel.app/shooter/schedule-check`;

  return await sendKakaoWorkMessageByShooter(shooter, textMessage, messageBlocks);
};

// üîß Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï Î©îÏãúÏßÄ (Ìå®ÌÑ¥ 2)
const sendTomorrowConfirmMessage = async (shooter: any) => {
  const messageBlocks = [
    {
      type: 'header',
      text: 'üìã ÎÇ¥Ïùº Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏïåÎ¶º'
    },
    {
      type: 'text',
      text: `ÏïàÎÖïÌïòÏÑ∏Ïöî. ${shooter.name} PDÎãò\nÎÇ¥Ïùº Ïä§ÏºÄÏ§Ñ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§. \nÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠Ìï¥Ï£ºÏÑ∏Ïöî.`
    },
    {
      type: 'button',
      text: '‚úÖ ÌôïÏù∏ÌïòÍ∏∞',
      style: 'primary',
      action_type: 'open_inapp_browser',
      value: 'https://schedule-app-v3-kappa.vercel.app/shooter/ShooterDashboard'
    }
  ];

  const textMessage = `üìã ÏïàÎÖïÌïòÏÑ∏Ïöî. ${shooter.name} PDÎãò\nÎÇ¥Ïùº Ïä§ÏºÄÏ§Ñ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§. \nÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠Ìï¥Ï£ºÏÑ∏Ïöî.\n\nÌôïÏù∏ÌïòÍ∏∞: https://schedule-app-v3-kappa.vercel.app/shooter/ShooterDashboard`;

  return await sendKakaoWorkMessageByShooter(shooter, textMessage, messageBlocks);
};

// üîß Ï¥¨ÏòÅÏûê Ï†ïÎ≥¥Î°ú Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ°
const sendKakaoWorkMessageByShooter = async (shooter: any, text: string, blocks: any[]) => {
  // Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùº Ï°∞Ìöå
  const { data: kakaoData, error: kakaoError } = await supabase
    .from('user_kakaowork_emails')
    .select('kakaowork_email')
    .eq('phone', shooter.phone)
    .single();

  if (kakaoError || !kakaoData?.kakaowork_email) {
    throw new Error(`${shooter.name}ÎãòÏùò Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùº Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.`);
  }

  // Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
  const userResponse = await fetch(`/api/kakaowork/find-user?email=${encodeURIComponent(kakaoData.kakaowork_email)}`);
  
  if (!userResponse.ok) {
    throw new Error(`${shooter.name}ÎãòÏùÑ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
  }

  const kakaoWorkUser = await userResponse.json();

  // Î©îÏãúÏßÄ Î∞úÏÜ°
  const sendResponse = await fetch('/api/kakaowork/send-message', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      userId: kakaoWorkUser.user?.id || kakaoWorkUser.id,
      userName: shooter.name,
      phone: shooter.phone,
      text: text,
      blocks: blocks,
      scheduleId: 0  // ÏùºÍ¥Ñ Î∞úÏÜ°Ïù¥ÎØÄÎ°ú ÌäπÏ†ï Ïä§ÏºÄÏ§Ñ ID ÏóÜÏùå
    })
  });

  if (!sendResponse.ok) {
    const errorData = await sendResponse.json();
    throw new Error(errorData.message || 'Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®');
  }

  return await sendResponse.json();
};


const sendKakaoWorkMessage = async (schedule: any, customMessage: string) => {
  try {
    const shooterInfo = schedule.user_profiles;
    
    if (!shooterInfo) {
      console.error('‚ùå Ï¥¨ÏòÅÏûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      alert('Ï¥¨ÏòÅÏûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return false;
    }

    console.log('üîç Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ° ÏãúÏûë:', {
      name: shooterInfo.name,
      phone: shooterInfo.phone,
      scheduleId: schedule.id
    });

    // üîß Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùº Ï°∞Ìöå
    const { data: kakaoData, error: kakaoError } = await supabase
      .from('user_kakaowork_emails')
      .select('kakaowork_email')
      .eq('phone', shooterInfo.phone)
      .single();

    if (kakaoError || !kakaoData?.kakaowork_email) {
      console.error('‚ùå Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', shooterInfo.phone);
      alert(`${shooterInfo.name}ÎãòÏùò Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùº Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.`);
      return false;
    }

    console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïù¥Î©îÏùº Ï°∞Ìöå ÏÑ±Í≥µ:', kakaoData.kakaowork_email);

    // üîß Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    const kakaoWorkResponse = await fetch(`/api/kakaowork/find-user?email=${encodeURIComponent(kakaoData.kakaowork_email)}`);

    if (!kakaoWorkResponse.ok) {
      const errorData = await kakaoWorkResponse.json();
      console.error('‚ùå Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïã§Ìå®:', errorData);
      alert(`${shooterInfo.name}ÎãòÏùÑ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
      return false;
    }

    const kakaoWorkUser = await kakaoWorkResponse.json();
    console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏÑ±Í≥µ:', kakaoWorkUser.display_name);

    // üîß ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
    const formatDate = (dateStr: string) => {
      const date = new Date(dateStr);
      const weekdays = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
      const month = date.getMonth() + 1;
      const day = date.getDate();
      const weekday = weekdays[date.getDay()];
      return `${month}Ïõî ${day}Ïùº(${weekday})`;
    };

    // üîß Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∏îÎ°ù (Ï†ïÌôïÌïú ÌòïÏãù)
    const messageBlocks = [
      {
        type: 'header',
        text: 'üìπ Ï¥¨ÏòÅ Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏïåÎ¶º'
      },
      {
        type: 'text',
        text: `ÏïàÎÖïÌïòÏÑ∏Ïöî! ${shooterInfo.name} PDÎãò\nÏ¥¨ÏòÅ Ïä§ÏºÄÏ§ÑÏù¥ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§.\n\nüìÖ Ï¥¨ÏòÅÏùº: ${formatDate(schedule.shoot_date)}\n‚è∞ ÏãúÍ∞Ñ: ${schedule.start_time?.substring(0, 5)} ~ ${schedule.end_time?.substring(0, 5)}\nüìç Ïû•ÏÜå: ${schedule.sub_locations?.main_locations?.name} - ${schedule.sub_locations?.name}\nüë®‚Äçüè´ Í∞ïÏÇ¨: ${schedule.professor_name} / ${schedule.course_name}`
      }
    ];

    // Ï†ÑÎã¨ÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (customMessage) {
      messageBlocks.push({
        type: 'text',
        text: `üìù Ï†ÑÎã¨ÏÇ¨Ìï≠: ${customMessage}`
      });
    }

    // Î≤ÑÌäº Ï∂îÍ∞Ä
    messageBlocks.push({
      type: 'button',
      text: 'üìã Ï†ÑÏ≤¥ Ïä§ÏºÄÏ§Ñ Î≥¥Í∏∞',
      style: 'primary',
      action_type: 'open_inapp_browser',
      value: 'https://schedule-app-v3-kappa.vercel.app/shooter/schedule-check'
    });

    // ÌÖçÏä§Ìä∏ Î≤ÑÏ†Ñ (fallback)
    const textMessage = `üìπ ÏïàÎÖïÌïòÏÑ∏Ïöî! ${shooterInfo.name} PDÎãò

Ï¥¨ÏòÅ Ïä§ÏºÄÏ§ÑÏù¥ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§.

üìÖ Ï¥¨ÏòÅÏùº: ${formatDate(schedule.shoot_date)}
‚è∞ ÏãúÍ∞Ñ: ${schedule.start_time?.substring(0, 5)} ~ ${schedule.end_time?.substring(0, 5)}
üìç Ïû•ÏÜå: ${schedule.sub_locations?.main_locations?.name} - ${schedule.sub_locations?.name}
üë®‚Äçüè´ Í∞ïÏÇ¨: ${schedule.professor_name} / ${schedule.course_name}

Ï†ÑÏ≤¥ Ïä§ÏºÄÏ§Ñ: https://schedule-app-v3-kappa.vercel.app/shooter/schedule-check${customMessage ? `\n\nüìù Ï†ÑÎã¨ÏÇ¨Ìï≠:\n${customMessage}` : ''}`;

    console.log('üìß Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∏îÎ°ù ÏÉùÏÑ± ÏôÑÎ£å:', messageBlocks.length, 'Í∞ú Î∏îÎ°ù');

// üîß Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ°
const sendResponse = await fetch('/api/kakaowork/send-message', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    userId: kakaoWorkUser.user?.id || kakaoWorkUser.id,
    userName: shooterInfo.name,
    phone: shooterInfo.phone,  // üìç Ïù¥ Î∂ÄÎ∂Ñ ÌôïÏù∏
    text: textMessage,
    blocks: messageBlocks,
    scheduleId: schedule.id
  })
});

console.log('üì§ Ï†ÑÏÜ°Îêú Îç∞Ïù¥ÌÑ∞:', {
  userId: kakaoWorkUser.user?.id || kakaoWorkUser.id,
  userName: shooterInfo.name,
  phone: shooterInfo.phone,
  hasText: !!textMessage,
  hasBlocks: !!messageBlocks,
  scheduleId: schedule.id
});

    if (!sendResponse.ok) {
      const errorData = await sendResponse.json();
      throw new Error(errorData.message || 'Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®');
    }

    const sendResult = await sendResponse.json();
    console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ° ÏôÑÎ£å:', sendResult);

    alert(`‚úÖ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ° ÏÑ±Í≥µ!

üë§ Î∞õÎäî ÏÇ¨Îûå: ${shooterInfo.name} (${kakaoWorkUser.display_name})
üìß Ïù¥Î©îÏùº: ${kakaoData.kakaowork_email}
üé® Ïπ¥Îìú ÌòïÌÉú Î©îÏãúÏßÄÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§!`);

    return true;

  } catch (error: any) {
    console.error('‚ùå Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ° Ïò§Î•ò:', error);
    alert(`Î©îÏãúÏßÄ Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
    return false;
  }
};






  // üîß Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï/Ìï¥Ï†ú Ìï®Ïàò Ï∂îÍ∞Ä
const handleScheduleConfirmation = async () => {
  try {
    if (!selectedScheduleForAssignment?.assigned_shooter_id) {
      alert('Ï¥¨ÏòÅÏûêÍ∞Ä Î∞∞Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }

    console.log('üîÑ Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏãúÏûë:', selectedScheduleForAssignment.id);

    // 1. Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    const { data, error } = await supabase
      .from('schedules')
      .update({ 
        assignment_status: 'confirmed',
        updated_at: new Date().toISOString()
      })
      .eq('id', selectedScheduleForAssignment.id)
      .select();

    if (error) throw error;

    console.log('‚úÖ Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï ÏôÑÎ£å');

    // 2. Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ°
    const messageSuccess = await sendKakaoWorkMessage(selectedScheduleForAssignment, customMessage);

    // 3. ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (UI ÏÉàÎ°úÍ≥†Ïπ®)
    setSchedules(prevSchedules => 
      prevSchedules.map(schedule => 
        schedule.id === selectedScheduleForAssignment.id
          ? { ...schedule, assignment_status: 'confirmed' }
          : schedule
      )
    );

    // 4. Í≤∞Í≥º ÏïåÎ¶º Î∞è Î™®Îã¨ Îã´Í∏∞
    if (messageSuccess) {
      alert('Ïä§ÏºÄÏ§ÑÏù¥ ÌôïÏ†ïÎêòÍ≥† Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏïåÎ¶ºÏù¥ Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§! ‚úÖ');
    } else {
      alert('Ïä§ÏºÄÏ§ÑÏùÄ ÌôïÏ†ïÎêòÏóàÏúºÎÇò Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ ÏïåÎ¶º Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ‚ö†Ô∏è');
    }

    // Î™®Îã¨ Îã´Í∏∞
    setShowShooterModal(false);
    setSelectedScheduleForAssignment(null);
    setFilteredShooters([]);
    setCustomMessage('');

  } catch (error: any) {
    console.error('ÌôïÏ†ï Ïò§Î•ò:', error);
    alert('ÌôïÏ†ï Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
  }
};




    // üîß Í∏∞Ï°¥ Ìï®Ïàò ÏàòÏ†ï (Î©îÏãúÏßÄ Î∞úÏÜ° Í∏∞Îä• Ï∂îÍ∞Ä)
    const handleBatchConfirmation = async () => {
      if (!confirm('ÌòÑÏû¨ Ï£ºÏóê Î∞∞ÏπòÎêú Î™®Îì† Ï¥¨ÏòÅÏûêÏóêÍ≤å Îã§Ïùå Ï£º Ïä§ÏºÄÏ§Ñ ÌôïÏù∏ Î©îÏãúÏßÄÎ•º Î∞úÏÜ°ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
        return;
      }

      try {
        console.log('üìÖ Ï£ºÍ∞Ñ ÏùºÍ¥Ñ ÌôïÏ†ï ÏãúÏûë - Î©îÏãúÏßÄ Î∞úÏÜ° Ìè¨Ìï®');

        // üîß 1Îã®Í≥Ñ: Í∏∞Ï°¥ DB ÌôïÏ†ï Î°úÏßÅ (Ïú†ÏßÄ)
        const weekDates = generateWeekDates();
        const startDate = weekDates[0].date;
        const endDate = weekDates[6].date;

        const { data, error } = await supabase
          .from('schedules')
          .update({ 
            assignment_status: 'confirmed',
            updated_at: new Date().toISOString()
          })
          .gte('shoot_date', startDate)
          .lte('shoot_date', endDate)
          .not('assigned_shooter_id', 'is', null)
          .eq('is_active', true)
          .eq('approval_status', 'approved');

        if (error) throw error;

        // üîß 2Îã®Í≥Ñ: Î©îÏãúÏßÄ Î∞úÏÜ° Ï∂îÍ∞Ä
        await sendWeeklyConfirmationMessages();

        alert('Ï£ºÍ∞Ñ ÏùºÍ¥Ñ ÌôïÏ†ï Î∞è Î©îÏãúÏßÄ Î∞úÏÜ°Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
        fetchAllSchedules(); // ÏÉàÎ°úÍ≥†Ïπ®

      } catch (error: any) {
        console.error('‚ùå Ï£ºÍ∞Ñ ÏùºÍ¥Ñ ÌôïÏ†ï Ïò§Î•ò:', error);
        alert(`Ï£ºÍ∞Ñ ÏùºÍ¥Ñ ÌôïÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
      }
    };


  // ÎîîÎ≤ÑÍπÖÏö© Ìó¨Ìçº Ìï®Ïàò
const debugKakaoWorkIntegration = async (phone: string) => {
  console.log('üîç Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïó∞Îèô ÎîîÎ≤ÑÍπÖ ÏãúÏûë:', phone);

  // 1Îã®Í≥Ñ Ï≤¥ÌÅ¨
  const { data: userData, error } = await supabase
    .from('users')
    .select('id, name, phone, email')
    .eq('phone', phone)
    .single();

  console.log('1Îã®Í≥Ñ - ÏÇ¨Ïö©Ïûê Ï°∞Ìöå:', { userData, error });

  if (userData?.email) {
    // 2Îã®Í≥Ñ Ï≤¥ÌÅ¨
    const response = await fetch(`/api/kakaowork/find-user?email=${encodeURIComponent(userData.email)}`);
    const kakaoWorkResult = await response.json();
    
    console.log('2Îã®Í≥Ñ - Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ï°∞Ìöå:', { 
      email: userData.email, 
      success: response.ok, 
      result: kakaoWorkResult 
    });
  }
};

// ÌÖåÏä§Ìä∏Ïö© Î≤ÑÌäº (Í∞úÎ∞ú ÏãúÏóêÎßå ÏÇ¨Ïö©)
const TestKakaoWorkButton = () => (
  <button 
    onClick={() => debugKakaoWorkIntegration('010-1234-5678')}
    style={{ background: 'orange', color: 'white', padding: '5px 10px' }}
  >
    Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Ïó∞Îèô ÌÖåÏä§Ìä∏
  </button>
);

// ÏóêÎü¨ ÌÉÄÏûÖÎ≥Ñ Ï≤òÎ¶¨
const handleKakaoWorkError = (error: any, shooterInfo: any) => {
  if (error.message?.includes('Ïù¥Î©îÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§')) {
    return `${shooterInfo.name}ÎãòÏùò Ïù¥Î©îÏùº Ï†ïÎ≥¥Í∞Ä DBÏóê ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.`;
  }
  
  if (error.message?.includes('Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§')) {
    return `${shooterInfo.name}ÎãòÏù¥ Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨Ïóê Îì±Î°ùÎêòÏñ¥ ÏûàÏßÄ ÏïäÍ±∞ÎÇò Ïù¥Î©îÏùºÏù¥ Îã§Î¶ÖÎãàÎã§.`;
  }
  
  if (error.message?.includes('Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®')) {
    return `Ïπ¥Ïπ¥Ïò§ÏõåÌÅ¨ Î©îÏãúÏßÄ Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.`;
  }
  
  return `Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`;
};



  const generateWeekDates = () => {
    const startOfWeek = new Date(currentWeek);
    const dayOfWeek = startOfWeek.getDay();
    const diff = startOfWeek.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
    startOfWeek.setDate(diff);

    const dates = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(startOfWeek);
      date.setDate(startOfWeek.getDate() + i);
      const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
      dates.push({ id: dateStr, date: dateStr, day: date.getDate() });
    }
    return dates;
  };

  const getLocationColor = (locationId: string | number) => {
    let location;
    if (typeof locationId === 'string') {
      if (locationId.startsWith('academy-')) {
        const numericId = parseInt(locationId.replace('academy-', ''));
        location = allLocations.find(loc => loc.type === 'academy' && loc.originalId === numericId);
      } else {
        return academyColors.default;
      }
    } else {
      location = allLocations.find(loc => loc.originalId === locationId);
    }

    const academyId = location?.mainLocationId;
    return academyColors[academyId as keyof typeof academyColors] || academyColors.default;
  };

  const getStudioShootingTypesDisplay = (studioId: number) => {
    const types = studioShootingTypes?.[studioId];
    if (!types || !types.primary) return null;
    
    const allTypes = [types.primary, ...types.secondary];
    return allTypes.join(', ');
  };

  const getScheduleForCell = (date: string, location: any) => {
    return schedules.filter(s => s.unified_date === date && s.unified_location_id === location.id);
  };

  const handleCellClick = (date: string, location: any) => {
    // ÏÖÄ ÌÅ¥Î¶≠ Ï≤òÎ¶¨
  };

  const renderScheduleCard = (schedule: any) => {
    if (schedule.unified_type === 'internal') {
      return renderInternalCard(schedule);
    } else {
      return renderStudioAcademyCard(schedule);
    }
  };

  // üîß Ïä§ÏºÄÏ§Ñ Ïπ¥Îìú Î†åÎçîÎßÅ (ÌôïÏ†ï Í∏∞Îä• Ìè¨Ìï®)
const renderStudioAcademyCard = (schedule: any) => {
  const isCancelled = schedule.approval_status === 'cancelled' || schedule.is_active === false;
  const isConfirmed = schedule.assignment_status === 'confirmed';  // üîß ÌôïÏ†ï ÏÉÅÌÉú ÌôïÏù∏
  const shooterText = schedule.user_profiles?.name || null;

  return (
    <ScheduleCardErrorBoundary key={schedule.id}>
      <div style={{
        position: 'relative',
        transition: 'all 0.2s ease',
        opacity: isCancelled ? 0.5 : 1,
        filter: isCancelled ? 'grayscale(50%)' : 'none',
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        marginBottom: '2px'
      }}>
        {/* üîß "Î∞∞ÏπòÏôÑÎ£å" ÏõåÌÑ∞ÎßàÌÅ¨ */}
        {isConfirmed && (
          <div style={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%) rotate(-15deg)',
            color: 'rgba(16, 185, 129, 0.3)',
            fontSize: '14px',
            fontWeight: '900',
            letterSpacing: '1px',
            zIndex: 15,
            pointerEvents: 'none',
            textShadow: '1px 1px 2px rgba(255, 255, 255, 0.8)',
            userSelect: 'none'
          }}>
            Î∞∞ÏπòÏôÑÎ£å
          </div>
        )}

        {/* Í∏∞Ï°¥ Ï∑®ÏÜåÎê® Ïò§Î≤ÑÎ†àÏù¥ */}
        {isCancelled && (
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 20,
            borderRadius: '8px',
            color: 'white',
            fontWeight: 'bold',
            fontSize: '14px',
            pointerEvents: 'none'
          }}>
            <div>Ï∑®ÏÜåÎê®</div>
          </div>
        )}
        
        <UnifiedScheduleCard
          schedule={schedule}
          scheduleType={schedule.schedule_type === 'academy' ? 'academy' : 'studio'}
          locationColor={schedule.schedule_type === 'academy' ? getLocationColor(schedule.sublocation_id) : undefined}
          onClick={(clickedSchedule) => handleScheduleCardClick(clickedSchedule)}
          onContextMenu={handleScheduleCardClick}
          showShooterInfo={true}
          shooterText={shooterText}
          style={{
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            minHeight: '60px'
          }}
        />
      </div>
    </ScheduleCardErrorBoundary>
  );
};




  const renderInternalCard = (schedule: any) => {
    const backgroundColor = schedule.shadow_color || getInternalLocationColor(schedule.schedule_type);
    const textColor = getContrastColor(schedule.shadow_color);

    return (
      <div key={schedule.id} style={{
        background: backgroundColor,
        color: textColor,
        padding: '8px',
        borderRadius: '4px',
        fontSize: '12px',
        fontWeight: '600',
        textAlign: 'center',
        marginBottom: '2px',
        cursor: 'default',
        transition: 'all 0.2s ease',
        border: `1px solid ${backgroundColor}`,
        opacity: 0.9,
        flex: 1,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        width: '100%',
        minHeight: '60px',
        overflow: 'hidden'
      }}>
        <div style={{
          fontSize: '12px',
          lineHeight: 1.3,
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          display: '-webkit-box',
          WebkitLineClamp: 3,
          WebkitBoxOrient: 'vertical'
        }}>
          {schedule.content}
        </div>
      </div>
    );
  };

  const handleScheduleCardClick = async (schedule: any) => {
    if (currentUserRole !== 'admin') {
      alert(`Ï¥¨ÏòÅÏûê Î∞∞Ï†ï Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. ÌòÑÏû¨ Í∂åÌïú: ${currentUserRole}`);
      return;
    }

    if (schedule.unified_type === 'internal') {
      alert('ÎÇ¥Î∂Ä ÏóÖÎ¨¥ Ïä§ÏºÄÏ§ÑÏùÄ Ï¥¨ÏòÅÏûê Î∞∞Ï†ïÏù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.');
      return;
    }

    console.log('üîç Ï¥¨ÏòÅÏûê ÌïÑÌÑ∞ÎßÅ ÏãúÏûë...', schedule);
    const availableShooters = await filterAvailableShooters(schedule);
    setFilteredShooters(availableShooters || []);
    setSelectedScheduleForAssignment(schedule);
    setShowShooterModal(true);
  };

  const getShooterTypeText = (userType: string): string => {
    const config = USER_TYPE_CONFIG[userType];
    if (config) {
      console.log(`${userType} ÌÉÄÏûÖ:`, config.displayName);
      return config.displayName;
    }
    console.log(`Ïïå Ïàò ÏóÜÎäî userType: ${userType}`);
    return userType;
  };

  const getShooterTypeColor = (userType: string): string => {
    const config = USER_TYPE_CONFIG[userType];
    if (config) {
      console.log(`${userType} ÏÉâÏÉÅ:`, config.color);
      return config.color;
    }
    console.log(`Ïïå Ïàò ÏóÜÎäî userType: ${userType}`);
    return '#6b7280';
  };

  const getFilteredLocations = () => {
    let filtered = allLocations;
    
    if (filters.scheduleType !== 'all') {
      filtered = filtered.filter(loc => loc.type === filters.scheduleType);
    }
    
    if (filters.mainLocationId !== 'all') {
      if (filters.mainLocationId === 'studio') {
        filtered = filtered.filter(loc => loc.type === 'studio');
      } else if (filters.mainLocationId === 'internal') {
        filtered = filtered.filter(loc => loc.type === 'internal');
      } else {
        filtered = filtered.filter(loc => loc.mainLocationId === parseInt(filters.mainLocationId));
      }
    }
    
    return filtered;
  };

  // üîß ÌôïÏ†ï ÏÉÅÌÉú ÌïÑÌÑ∞ Ï∂îÍ∞Ä
  const getFilteredSchedules = () => {
    let filtered = schedules;
    
    if (filters.shooterStatus !== 'all') {
      if (filters.shooterStatus === 'assigned') {
        filtered = filtered.filter(s => s.unified_type === 'internal' || s.user_profiles);
      } else if (filters.shooterStatus === 'unassigned') {
        filtered = filtered.filter(s => s.unified_type === 'studio_academy' && !s.user_profiles);
      }
    }
    
    if (filters.scheduleStatus !== 'all') {
      filtered = filtered.filter(s => s.tracking_status === filters.scheduleStatus);
    }

    // üîß ÌôïÏ†ï ÏÉÅÌÉú ÌïÑÌÑ∞ Ï∂îÍ∞Ä
    if (filters.confirmationStatus !== 'all') {
      if (filters.confirmationStatus === 'confirmed') {
        filtered = filtered.filter(s => s.assignment_status === 'confirmed');
      } else if (filters.confirmationStatus === 'draft') {
        filtered = filtered.filter(s => s.assignment_status !== 'confirmed');
      }
    }
    
    return filtered;
  };

  // üîß ÌôïÏ†ï Í∏∞Îä• Ìè¨Ìï® ÌïÑÌÑ∞ Î†åÎçîÎßÅ
  const renderFilters = () => (
    <div style={{ 
      display: 'flex', 
      alignItems: 'center', 
      gap: '12px',
      flexDirection: 'row'
    }}>
      <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
        <label style={{ fontSize: '13px', fontWeight: '600', color: 'var(--text-primary)', minWidth: '40px' }}>
          Î∂ÑÎ•ò
        </label>
        <select
          value={filters.scheduleType}
          onChange={(e) => setFilters({...filters, scheduleType: e.target.value, mainLocationId: 'all'})}
          style={{
            padding: '4px 8px',
            border: '1px solid var(--border-color)',
            borderRadius: '4px',
            background: 'var(--bg-primary)',
            color: 'var(--text-primary)',
            fontSize: '13px',
            outline: 'none'
          }}
        >
          <option value="all">Ï†ÑÏ≤¥</option>
          <option value="studio">Ïä§ÌäúÎîîÏò§</option>
          <option value="academy">ÌïôÏõê</option>
          <option value="internal">ÎÇ¥Î∂ÄÏóÖÎ¨¥</option>
        </select>
      </div>

      {filters.scheduleType === 'academy' && (
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <label style={{ fontSize: '13px', fontWeight: '600', color: 'var(--text-primary)', minWidth: '40px' }}>
            ÏßÄÏó≠
          </label>
          <select
            value={filters.mainLocationId}
            onChange={(e) => setFilters({...filters, mainLocationId: e.target.value})}
            style={{
              padding: '4px 8px',
              border: '1px solid var(--border-color)',
              borderRadius: '4px',
              background: 'var(--bg-primary)',
              color: 'var(--text-primary)',
              fontSize: '13px',
              outline: 'none'
            }}
          >
            <option value="all">Ï†ÑÏ≤¥ ÏßÄÏó≠</option>
            {mainLocations
              .filter(loc => loc.location_type === 'academy')
              .map(loc => (
                <option key={loc.id} value={loc.id.toString()}>
                  {loc.name}
                </option>
              ))
            }
          </select>
        </div>
      )}

      <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
        <label style={{ fontSize: '13px', fontWeight: '600', color: 'var(--text-primary)', minWidth: '50px' }}>
          Ï¥¨ÏòÅÏûê
        </label>
        <select
          value={filters.shooterStatus}
          onChange={(e) => setFilters({...filters, shooterStatus: e.target.value})}
          style={{
            padding: '4px 8px',
            border: '1px solid var(--border-color)',
            borderRadius: '4px',
            background: 'var(--bg-primary)',
            color: 'var(--text-primary)',
            fontSize: '13px',
            outline: 'none'
          }}
        >
          <option value="all">Ï†ÑÏ≤¥</option>
          <option value="assigned">Î∞∞Ï†ïÎê®</option>
          <option value="unassigned">ÎØ∏Î∞∞Ï†ï</option>
        </select>
      </div>

      <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
        <label style={{ fontSize: '13px', fontWeight: '600', color: 'var(--text-primary)', minWidth: '40px' }}>
          ÏÉÅÌÉú
        </label>
        <select
          value={filters.scheduleStatus}
          onChange={(e) => setFilters({...filters, scheduleStatus: e.target.value})}
          style={{
            padding: '4px 8px',
            border: '1px solid var(--border-color)',
            borderRadius: '4px',
            background: 'var(--bg-primary)',
            color: 'var(--text-primary)',
            fontSize: '13px',
            outline: 'none'
          }}
        >
          <option value="all">Ï†ÑÏ≤¥</option>
          <option value="pending">ÎåÄÍ∏∞Ï§ë</option>
          <option value="confirmed">ÌôïÏ†ï</option>
          <option value="in_progress">ÏßÑÌñâÏ§ë</option>
          <option value="completed">ÏôÑÎ£å</option>
          <option value="cancelled">Ï∑®ÏÜåÎê®</option>
        </select>
      </div>

      {/* üîß ÌôïÏ†ï ÏÉÅÌÉú ÌïÑÌÑ∞ Ï∂îÍ∞Ä */}
      {currentUserRole === 'admin' && (
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <label style={{ fontSize: '13px', fontWeight: '600', color: 'var(--text-primary)', minWidth: '40px' }}>
            ÌôïÏ†ï
          </label>
          <select
            value={filters.confirmationStatus}
            onChange={(e) => setFilters({...filters, confirmationStatus: e.target.value})}
            style={{
              padding: '4px 8px',
              border: '1px solid var(--border-color)',
              borderRadius: '4px',
              background: 'var(--bg-primary)',
              color: 'var(--text-primary)',
              fontSize: '13px',
              outline: 'none'
            }}
          >
            <option value="all">Ï†ÑÏ≤¥</option>
            <option value="confirmed">ÌôïÏ†ïÎê®</option>
            <option value="draft">ÏûÑÏãú</option>
          </select>
        </div>
      )}

      {/* üîß ÏùºÍ¥Ñ ÌôïÏ†ï Î≤ÑÌäº Ï∂îÍ∞Ä */}
      {currentUserRole === 'admin' && (
        <button
          onClick={handleBatchConfirmation}
          style={{
            padding: '6px 12px',
            background: '#10b981',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '13px',
            fontWeight: 'bold',
            marginLeft: '8px'
          }}
        >
          Ï£ºÍ∞Ñ ÏùºÍ¥ÑÌôïÏ†ï
        </button>
      )}

      {/* üîß Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï Î≤ÑÌäº Ï∂îÍ∞Ä */}
      {currentUserRole === 'admin' && (
        <button
          onClick={handleTomorrowConfirmation}
          disabled={isTomorrowConfirming}
          style={{
            padding: '6px 12px',
            background: '#f59e0b',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: isTomorrowConfirming ? 'not-allowed' : 'pointer',
            fontSize: '13px',
            fontWeight: 'bold',
            marginLeft: '8px'
          }}
        >
          {isTomorrowConfirming ? 'üì§ Î∞úÏÜ° Ï§ë...' : 'üìã Îã§ÏùåÎÇ† Ïä§ÏºÄÏ§Ñ ÌôïÏ†ï'}
        </button>
      )}
    </div>
  );

  if (loading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        background: 'var(--bg-primary)'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '4px solid var(--accent-color)',
            borderTop: '4px solid transparent',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }} />
          <div style={{ color: 'var(--text-secondary)', fontSize: '14px' }}>
            Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...
          </div>
          <style jsx>{`
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          `}</style>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        background: 'var(--bg-primary)'
      }}>
        <div style={{ textAlign: 'center', color: '#dc2626' }}>
          <div style={{ fontSize: 48, marginBottom: 16 }}>‚ö†Ô∏è</div>
          <div style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 8 }}>
            Ïò§Î•ò Î∞úÏÉù
          </div>
          <div style={{ marginBottom: 20 }}>{error}</div>
          <button 
            onClick={fetchData}
            style={{
              padding: '10px 20px',
              background: 'var(--accent-color)',
              color: 'white',
              border: 'none',
              borderRadius: 6,
              cursor: 'pointer',
              fontWeight: 'bold'
            }}
          >
            Îã§Ïãú ÏãúÎèÑ
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={{ width: '100%', height: '100vh', overflow: 'hidden', outline: 'none', display: 'flex', flexDirection: 'column' }}>
      <style jsx global>{`
        .schedule-grid-container .cell-wrapper {
          padding: 6px !important;
          display: flex !important;
          flex-direction: column !important;
          height: 100% !important;
        }
        
        .schedule-grid-container .schedule-list {
          gap: 4px !important;
          flex: 1 !important;
          display: flex !important;
          flex-direction: column !important;
          overflow-y: visible !important;
          overflow: visible !important;
          width: 100% !important;
          min-height: 0 !important;
          height: 100% !important;
        }
        
        .schedule-grid-container .schedule-list::-webkit-scrollbar {
          display: none !important;
        }
      `}</style>

      <div style={{ 
        height: '100%', 
        overflow: 'hidden', 
        background: 'var(--bg-primary)', 
        padding: '20px',
        outline: 'none',
        display: 'flex', 
        flexDirection: 'column' 
      }}>
        <div style={{ flex: 1, overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>
          <BaseScheduleGrid
            title={title}
            leftColumnTitle="Ï¥¨ÏòÅÏû•ÏÜå"
            locations={getFilteredLocations()}
            schedules={getFilteredSchedules()}
            currentWeek={currentWeek}
            onWeekChange={navigateWeek}
            onCellClick={handleCellClick}
            getScheduleForCell={getScheduleForCell}
            renderScheduleCard={renderScheduleCard}
            showAddButton={false}
            userRole={currentUserRole}
            pageType="all"
            hideHeader={false}
            getLocationColor={getLocationColor}
            customFilters={renderFilters()}
            getStudioShootingTypes={getStudioShootingTypesDisplay}
            useDynamicHeight={true}
            minCellHeight={80}
            maxCellHeight={400}
            cardHeight={85}
          />
        </div>
      </div>

    {/* Ï¥¨ÏòÅÏûê ÏÑ†ÌÉù Î™®Îã¨ */}
    {showShooterModal && selectedScheduleForAssignment && (
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(0,0,0,0.6)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
        backdropFilter: 'blur(2px)'
      }}>
        <div 
          data-modal-content
          style={{
            background: 'var(--bg-secondary)',
            borderRadius: '16px',
            padding: '32px',
            maxWidth: '850px',
            width: '95%',
            maxHeight: '90vh',
            overflowY: 'auto',
            border: '1px solid var(--border-color)',
            boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
            outline: 'none'
          }}
        >
          {/* Ìó§Îçî */}
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '20px',
            paddingBottom: '12px',
            borderBottom: '2px solid var(--border-color)'
          }}>
            <h3 style={{ margin: 0, color: 'var(--text-primary)', fontSize: '18px', fontWeight: '700' }}>
              Ï¥¨ÏòÅÏûê Î∞∞Ï†ï Î∞è ÌôïÏ†ï
            </h3>
            <button
              onClick={() => {
                setShowShooterModal(false);
                setSelectedScheduleForAssignment(null);
                setFilteredShooters([]);
                setCustomMessage('');
              }}
              style={{
                background: 'none',
                border: 'none',
                fontSize: '24px',
                color: 'var(--text-secondary)',
                cursor: 'pointer',
                outline: 'none'
              }}
            >
              √ó
            </button>
          </div>

            {/* Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ */}
            <div style={{
              padding: '16px',
              background: 'var(--bg-primary)',
              borderRadius: '8px',
              marginBottom: '20px',
              border: '1px solid var(--border-color)'
            }}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '10px', marginBottom: '12px' }}>
                <div>
                  <span style={{ color: 'var(--text-secondary)', fontSize: '11px', fontWeight: '500' }}>
                    Ï¥¨ÏòÅÏùº
                  </span>
                  <div style={{ color: 'var(--text-primary)', fontSize: '13px', fontWeight: '600', marginTop: '2px' }}>
                    {selectedScheduleForAssignment.shoot_date}
                  </div>
                </div>
                <div>
                  <span style={{ color: 'var(--text-secondary)', fontSize: '11px', fontWeight: '500' }}>
                    ÏãúÍ∞Ñ
                  </span>
                  <div style={{ color: 'var(--text-primary)', fontSize: '13px', fontWeight: '600', marginTop: '2px' }}>
                    {selectedScheduleForAssignment.start_time?.substring(0, 5)} ~ {selectedScheduleForAssignment.end_time?.substring(0, 5)}
                  </div>
                </div>
                <div>
                  <span style={{ color: 'var(--text-secondary)', fontSize: '11px', fontWeight: '500' }}>
                    Ï¥¨ÏòÅÏû•ÏÜå
                  </span>
                  <div style={{ color: 'var(--text-primary)', fontSize: '12px', fontWeight: '500', marginTop: '2px' }}>
                    {selectedScheduleForAssignment.sub_locations?.main_locations?.name} - {selectedScheduleForAssignment.sub_locations?.name}
                  </div>
                </div>
              </div>
              
              <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '10px' }}>
                <div>
                  <span style={{ color: 'var(--text-secondary)', fontSize: '11px', fontWeight: '500' }}>
                    Í∞ïÏùò Ï†ïÎ≥¥
                  </span>
                  <div style={{ color: 'var(--text-primary)', fontSize: '14px', fontWeight: '700', marginTop: '2px' }}>
                    {selectedScheduleForAssignment.professor_name} / {selectedScheduleForAssignment.course_name}
                  </div>
                </div>
                {selectedScheduleForAssignment.schedule_type === 'studio' && selectedScheduleForAssignment.shooting_type && (
                  <div>
                    <span style={{ color: 'var(--text-secondary)', fontSize: '11px', fontWeight: '500' }}>
                      Ï¥¨ÏòÅÌÉÄÏûÖ
                    </span>
                    <div style={{ color: 'var(--text-primary)', fontSize: '12px', fontWeight: '600', marginTop: '2px' }}>
                      {selectedScheduleForAssignment.shooting_type}
                    </div>
                  </div>
                )}
              </div>
            </div>

 {/* üîß ÌòÑÏû¨ Î∞∞Ï†ïÎêú Ï¥¨ÏòÅÏûê (Ïä§ÌÅ¨Î°§ ÏÉÅÎã®Ïóê ÌëúÏãú) */}
      {selectedScheduleForAssignment?.assigned_shooter_id && (
        <div style={{
          padding: '16px',
          background: '#d1fae5',
          border: '1px solid #a7f3d0',
          borderRadius: '8px',
          marginBottom: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div>
            <div style={{ fontWeight: 'bold', color: '#065f46', fontSize: '14px', marginBottom: '4px' }}>
              ‚úÖ ÌòÑÏû¨ Î∞∞Ï†ïÎêú Ï¥¨ÏòÅÏûê
            </div>
            <div style={{ fontSize: '16px', color: '#065f46', fontWeight: '600' }}>
              {selectedScheduleForAssignment.user_profiles?.name}
            </div>
            <div style={{ fontSize: '12px', color: '#065f46', marginTop: '2px' }}>
              üìû {selectedScheduleForAssignment.user_profiles?.phone}
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '8px' }}>
            {/* Ìï¥Ï†ú Î≤ÑÌäº */}
            <button
              onClick={() => {
                if (confirm('Î∞∞Ï†ïÏùÑ Ìï¥Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                  handleShooterChange(selectedScheduleForAssignment.id, null);
                }
              }}
              style={{
                background: '#ef4444',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                padding: '8px 12px',
                cursor: 'pointer',
                fontSize: '12px',
                fontWeight: 'bold'
              }}
            >
              Ìï¥Ï†ú
            </button>
            
            {/* üîß ÌôïÏ†ï Î≤ÑÌäº */}
            <button
              onClick={handleScheduleConfirmation}
              disabled={isAssigning}
              style={{
                background: '#10b981',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                padding: '8px 12px',
                cursor: isAssigning ? 'not-allowed' : 'pointer',
                fontSize: '12px',
                fontWeight: 'bold'
              }}
            >
              {isAssigning ? 'Ï≤òÎ¶¨Ï§ë...' : 'ÌôïÏ†ï'}
            </button>
          </div>
        </div>
      )}

      {/* üîß Ï†ÑÎã¨ÏÇ¨Ìï≠ ÏûÖÎ†•ÎûÄ (Î∞∞Ï†ïÎêú Í≤ΩÏö∞ÏóêÎßå ÌëúÏãú) */}
      {selectedScheduleForAssignment?.assigned_shooter_id && (
        <div style={{
          marginBottom: '20px',
          padding: '16px',
          background: 'var(--bg-primary)',
          border: '1px solid var(--border-color)',
          borderRadius: '8px'
        }}>
          <label style={{
            display: 'block',
            fontSize: '13px',
            fontWeight: '600',
            color: 'var(--text-primary)',
            marginBottom: '8px'
          }}>
            üìù Ï†ÑÎã¨ÏÇ¨Ìï≠ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
          </label>
          <textarea
            value={customMessage}
            onChange={(e) => setCustomMessage(e.target.value)}
            placeholder="Ï¥¨ÏòÅÏûêÏóêÍ≤å Ï†ÑÎã¨Ìï† Ï∂îÍ∞Ä Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
            style={{
              width: '100%',
              minHeight: '80px',
              padding: '8px',
              border: '1px solid var(--border-color)',
              borderRadius: '4px',
              resize: 'vertical',
              fontSize: '13px',
              outline: 'none'
            }}
          />
          <div style={{
            fontSize: '11px',
            color: 'var(--text-secondary)',
            marginTop: '4px'
          }}>
            Í∏∞Î≥∏ Î©îÏãúÏßÄ: "Ïù¥Î≤àÏ£º Ï¥¨ÏòÅÏù¥ Î∞∞Ï†ïÎêòÏóàÏäµÎãàÎã§. ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî" + Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥
          </div>
        </div>
      )}

      {/* Í∞ÄÎä•Ìïú Ï¥¨ÏòÅÏûê Î™©Î°ù (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïòÏßÄÎßå ÏÑ†ÌÉù Ïãú Î™®Îã¨ Ïú†ÏßÄ) */}
      <div style={{ marginBottom: '20px' }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '16px' }}>
          <h4 style={{ margin: 0, color: 'var(--text-primary)', fontSize: '16px', fontWeight: '700' }}>
            Í∞ÄÎä•Ìïú Ï¥¨ÏòÅÏûê
          </h4>
          <div style={{ color: 'var(--text-secondary)', fontSize: '12px', fontWeight: '500' }}>
            Ï†ÑÏ≤¥: {shooters.length}Î™Ö / <span style={{ color: 'var(--accent-color)', fontWeight: '700' }}>{filteredShooters.length}</span>Î™Ö
          </div>
        </div>

        <div style={{
  display: 'grid',
  gridTemplateColumns: window.innerWidth > 768 ? 'repeat(2, 1fr)' : 'repeat(3, 1fr)',
  gap: window.innerWidth > 768 ? '10px' : '8px',
  maxHeight: '420px',
  overflowY: 'auto',
  padding: '6px'
}}>
  {filteredShooters.length === 0 ? (
    <div style={{
      gridColumn: '1 / -1',
      textAlign: 'center',
      color: 'var(--text-secondary)',
      padding: '40px',
      fontSize: '13px',
      background: '#f8f9fa',
      borderRadius: '8px',
      border: '1px dashed #dee2e6'
    }}>
      <div style={{ fontSize: '16px', marginBottom: '8px' }}>üòî</div>
      <div>Í∞ÄÎä•Ìïú Ï¥¨ÏòÅÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>
      <div style={{ fontSize: '11px', marginTop: '6px', opacity: 0.7 }}>
        ÏúÑÏπò, ÏãúÍ∞Ñ, ÌîÑÎ¶¨ÎûúÏÑú Ï£ºÍ∞Ñ Ïä§ÏºÄÏ§Ñ Îì±ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.
      </div>
    </div>
  ) : (
    filteredShooters.map((shooter) => (
      <button
        key={shooter.id}
        onClick={() => handleShooterChange(selectedScheduleForAssignment.id, shooter.id)}
        disabled={isAssigning}
        style={{
          padding: window.innerWidth > 768 ? '14px' : '12px',
          background: selectedScheduleForAssignment.assigned_shooter_id === shooter.id 
            ? '#10b981' 
            : 'var(--bg-primary)',
          color: selectedScheduleForAssignment.assigned_shooter_id === shooter.id 
            ? 'white' 
            : 'var(--text-primary)',
          border: selectedScheduleForAssignment.assigned_shooter_id === shooter.id 
            ? '2px solid #10b981' 
            : '1.5px solid var(--border-color)',
          borderRadius: '8px',
          cursor: isAssigning ? 'not-allowed' : 'pointer',
          textAlign: 'left',
          transition: 'all 0.2s ease',
          width: '100%',
          minHeight: window.innerWidth > 768 ? '110px' : '100px',
          display: 'flex',
          flexDirection: 'column'
        }}
        onMouseEnter={(e) => {
          if (!isAssigning && selectedScheduleForAssignment.assigned_shooter_id !== shooter.id) {
            e.currentTarget.style.background = 'var(--accent-color)';
            e.currentTarget.style.color = 'white';
            e.currentTarget.style.borderColor = 'var(--accent-color)';
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 6px 16px rgba(0,0,0,0.15)';
          }
        }}
        onMouseLeave={(e) => {
          if (!isAssigning && selectedScheduleForAssignment.assigned_shooter_id !== shooter.id) {
            e.currentTarget.style.background = 'var(--bg-primary)';
            e.currentTarget.style.color = 'var(--text-primary)';
            e.currentTarget.style.borderColor = 'var(--border-color)';
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
          }
        }}
      >
        <div style={{ display: 'flex', flexDirection: 'column', gap: '6px', height: '100%' }}>
          {/* üîß Ïù¥Î¶ÑÍ≥º ÌÉÄÏûÖ Î∞∞ÏßÄ */}
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <div style={{ 
              fontWeight: '700', 
              fontSize: '15px', 
              color: 'inherit', 
              lineHeight: 1.2 
            }}>
              {shooter.name}
            </div>
            <div style={{
              fontSize: '9px',
              fontWeight: '700',
              color: getShooterTypeColor(shooter.usertype),
              backgroundColor: `${getShooterTypeColor(shooter.usertype)}20`,
              padding: '4px 6px',
              borderRadius: '12px',
              lineHeight: 1.2,
              whiteSpace: 'nowrap',
              flexShrink: 0,
              border: `1.5px solid ${getShooterTypeColor(shooter.usertype)}`,
              textTransform: 'uppercase',
              letterSpacing: '0.5px'
            }}>
              {shooter.role === 'schedule_admin' ? 'ADMIN' : (shooter.shootertype ? shooter.shootertype.toUpperCase() : 'REGULAR')}
            </div>
          </div>

          {/* üîß Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥ */}
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '3px', 
            fontSize: '11.5px', 
            opacity: 0.9 
          }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
              <span style={{ minWidth: '14px', fontSize: '12px' }}>üìû</span>
              <span>{shooter.phone}</span>
            </div>
            {shooter.emergencycontact && shooter.emergencycontact !== shooter.phone && (
              <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                <span style={{ 
                  minWidth: '14px', 
                  color: selectedScheduleForAssignment.assigned_shooter_id === shooter.id ? '#fef3cd' : '#dc2626', 
                  fontSize: '12px' 
                }}>üö®</span>
                <span style={{ 
                  color: selectedScheduleForAssignment.assigned_shooter_id === shooter.id ? '#fef3cd' : '#dc2626', 
                  fontWeight: '600', 
                  fontSize: '11px' 
                }}>
                  {shooter.emergencycontact}
                </span>
              </div>
            )}
          </div>

          <div style={{ marginTop: 'auto' }} />
        </div>
      </button>
    ))
  )}
</div>

      </div>
    </div>
  </div>
)}
    </div>
  );
}
